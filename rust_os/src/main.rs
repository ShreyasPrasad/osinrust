// in src/main.rs

#![no_std]
#![no_main]
#![feature(custom_test_frameworks)]
#![test_runner(rust_os::test_runner)]
#![reexport_test_harness_main = "test_main"]

use core::panic::PanicInfo;
use rust_os::println;
use x86_64::instructions::hlt;

#[no_mangle]
pub extern "C" fn _start() -> ! {
    println!("Hello World{}", "!");

    rust_os::init();

    /* Use conditional compilation to add the call to test_main only in test contexts because 
    the function is not generated on a normal run. */
    #[cfg(test)]
    /* test_main is generated by the test framework and it just invokves the test_runner. */
    test_main();

    hlt_loop();
    
}

/// This function is called on panic.
#[cfg(not(test))]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    println!("{}", info);
    hlt_loop();
}

pub fn hlt_loop() -> ! {
    // hlt: Halt the CPU until the next interrupt arrives and allow the CPu eot tner a sleep state.
    loop {
        hlt();
    }
}

#[cfg(test)]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    rust_os::test_panic_handler(info)
}
