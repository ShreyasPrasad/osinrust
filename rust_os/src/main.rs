// in src/main.rs

#![no_std]
#![no_main]
#![feature(custom_test_frameworks)]
#![test_runner(rust_os::test_runner)]
#![reexport_test_harness_main = "test_main"]

use core::panic::PanicInfo;
use rust_os::println;

/* The test crate depends on the standard library, so we can't use it. Fortunately, Rust supports replacing the 
default test framework through the unstable custom_test_frameworks feature. This feature requires no external 
libraries and thus also works in #[no_std] environments. */

#[no_mangle]
pub extern "C" fn _start() -> ! {
    println!("Hello World{}", "!");

    /* Use conditional compilation to add the call to test_main only in test contexts because 
    the function is not generated on a normal run. */
    #[cfg(test)]
    /* test_main is generated by the test framework and it just invokves the test_runner. */
    test_main();

    loop {}
}

/// This function is called on panic.
#[cfg(not(test))]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    println!("{}", info);
    loop {}
}

#[cfg(test)]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    rust_os::test_panic_handler(info)
}
